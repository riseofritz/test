// Class to represent a single Bacteria organism
class Bacteria {
  int x, y;       // Position of the bacteria
  int color;      // Color of the bacteria

  // Constructor to initialize the bacteria's position and color
  Bacteria(int startX, int startY, int colorValue) {
    x = startX;
    y = startY;
    color = colorValue;
  }

  // Move function for random walk pattern
  void move() {
    x += int(random(-2, 2));
    y += int(random(-2, 2));
    
    // Keep bacteria within bounds
    if (x < 0) x = 0;
    if (x > width) x = width;
    if (y < 0) y = 0;
    if (y > height) y = height;
  }

  // Show function to draw bacteria with its color and position
  void show() {
    fill(color);
    noStroke();
    ellipse(x, y, 30, 30); // Draw a larger circle for each bacteria
  }
}

Bacteria[] bacteriaArray; // Array to store multiple Bacteria instances
int numBacteria = 10;     // Number of bacteria to create
int hits = 0;             // Track number of hits
int misses = 0;           // Track number of misses
int startTime;            // Store start time for timer
int endTime = 0;          // Store end time for constant display
boolean gameEnded = false; // Flag to check if game has ended
String performanceMessage = ""; // Store performance message

void setup() {
  size(500, 500);
  startTime = millis(); // Record the start time

  // Initialize bacteria array with instances
  bacteriaArray = new Bacteria[numBacteria];
  for (int i = 0; i < numBacteria; i++) {
    bacteriaArray[i] = new Bacteria(width / 2, height / 2, color(255, 100, 100));
  }
}

void draw() {
  background(0); // Clear the screen
  
  if (!gameEnded) {
    // Update and display each bacteria
    for (int i = bacteriaArray.length - 1; i >= 0; i--) {
      Bacteria b = bacteriaArray[i];
      b.move();
      b.show();
    }

    // Check if all bacteria are removed to end the game
    if (bacteriaArray.length == 0) {
      gameEnded = true;
      endTime = (millis() - startTime) / 1000; // Record final time in seconds

      // Determine performance message based on end time and misses
      if (endTime <= 15) {
        if (misses < 10) {
          performanceMessage = "Impressive!";
        } else if (misses < 15) {
          performanceMessage = "Great!";
        } else {
          performanceMessage = "Nice!";
        }
      } else if (endTime <= 30) {
        if (misses < 10) {
          performanceMessage = "Great!";
        } else {
          performanceMessage = "Nice!";
        }
      } else if (endTime <= 60) {
        performanceMessage = "Nice!";
      }
    }
  } else {
    // Display end screen with performance message and results
    fill(255);
    textSize(32);
    textAlign(CENTER, CENTER);
    text(performanceMessage, width / 2, height / 2 - 80); // Display performance message
    text("Game Over", width / 2, height / 2 - 40);
    text("Misses: " + misses, width / 2, height / 2);
    text("Time Taken: " + endTime + "s", width / 2, height / 2 + 40);
  }
}

void mousePressed() {
  if (gameEnded) return; // Stop checking clicks if game has ended
  
  boolean hit = false;
  
  // Check if any bacteria is clicked and remove it
  for (int i = bacteriaArray.length - 1; i >= 0; i--) {
    Bacteria b = bacteriaArray[i];
    float distance = dist(mouseX, mouseY, b.x, b.y);
    if (distance < 15) {
      bacteriaArray = removeBacteria(bacteriaArray, i); // Remove clicked bacteria
      hits++;
      hit = true;
      break;
    }
  }
  
  if (!hit) {
    misses++; // Increment miss counter if no bacteria was clicked
  }
}

// Helper function to remove a bacteria from array
Bacteria[] removeBacteria(Bacteria[] array, int index) {
  Bacteria[] newArray = new Bacteria[array.length - 1];
  for (int i = 0, j = 0; i < array.length; i++) {
    if (i != index) {
      newArray[j++] = array[i];
    }
  }
  return newArray;
}
